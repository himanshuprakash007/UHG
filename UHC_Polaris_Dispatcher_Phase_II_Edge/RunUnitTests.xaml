<Activity mc:Ignorable="sap sap2010" x:Class="Unit_Test_Framework" mva:VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="960.8,728" sap2010:WorkflowViewState.IdRef="TestFramework_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Diagnostics;assembly=System" xmlns:si="clr-namespace:System.IO;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>CustomActivities.VariableComparer</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Cryptography</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Java.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.PDF</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <StateMachine InitialState="{x:Reference __ReferenceID3}" sap2010:Annotation.AnnotationText="The below flow will run all the unit test files present in the Tests_Repository folder." DisplayName="Run All Unit Tests" sap:VirtualizedContainerService.HintSize="940.8,668" sap2010:WorkflowViewState.IdRef="StateMachine_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <av:Point x:Key="ShapeLocation">10,32.4</av:Point>
        <x:Double x:Key="StateContainerWidth">907.2</x:Double>
        <x:Double x:Key="StateContainerHeight">600</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">70,70 100,70 100,73.2 135.6,73.2</av:PointCollection>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <State x:Name="__ReferenceID3" sap2010:Annotation.AnnotationText="Perform initialization. Create a log file (if not present), and grab all unit tests from repository." DisplayName="Initialization" sap:VirtualizedContainerService.HintSize="287.2,144" sap2010:WorkflowViewState.IdRef="State_1">
      <State.Entry>
        <TryCatch sap:VirtualizedContainerService.HintSize="688.8,3114.4" sap2010:WorkflowViewState.IdRef="TryCatch_1">
          <TryCatch.Try>
            <Sequence DisplayName="Initialize Framework" sap:VirtualizedContainerService.HintSize="652,2836.8" sap2010:WorkflowViewState.IdRef="Sequence_1">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence sap2010:Annotation.AnnotationText="(Important) Before proceeding, do set the location of CommonLogg.xaml in Logfile variable." DisplayName="Set Default Values" sap:VirtualizedContainerService.HintSize="610.4,524.8" sap2010:WorkflowViewState.IdRef="Sequence_14">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Assign-LogFile" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_35">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[LogFile]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">\\nas00912pn\Data\RPA_DEV_SHARE_DRIVE\Technical_Maturity\CommomLogging\CommonLogg.xaml</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1035" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" UnSafe="False" WorkflowFileName="[LogFile]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="logCode">1035</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="ExtraLog" />
                    <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <Assign DisplayName="Set BusinessException to Nothing" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_28">
                  <Assign.To>
                    <OutArgument x:TypeArguments="ui:BusinessRuleException">[BusinessException]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="ui:BusinessRuleException">[Nothing]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Set SystemError to Nothing" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:Exception">[Nothing]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <Sequence DisplayName="Adapt Framework to Environment" sap:VirtualizedContainerService.HintSize="610.4,1083.2" sap2010:WorkflowViewState.IdRef="Sequence_11">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Name="currentDirectory" />
                  <Variable x:TypeArguments="x:String" Name="BaseFolder" />
                  <Variable x:TypeArguments="s:String[]" Name="SubDirectories" />
                  <Variable x:TypeArguments="x:String" Name="FrameworkBaseFolder" />
                  <Variable x:TypeArguments="x:String" Name="FrameworkBaseDirectoryPath" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Get Current Directory" sap:VirtualizedContainerService.HintSize="568.8,60" sap2010:WorkflowViewState.IdRef="Assign_14">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[currentDirectory]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Environment.currentDirectory]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Get Base Folder Name" sap:VirtualizedContainerService.HintSize="568.8,60" sap2010:WorkflowViewState.IdRef="Assign_15">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[BaseFolder]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[currentDirectory.Split(new String() {"\"}, StringSplitOptions.None)(currentDirectory.Split(new String() {"\"}, StringSplitOptions.None).Length-1)]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Get All Directories in a Main Project" sap:VirtualizedContainerService.HintSize="568.8,60" sap2010:WorkflowViewState.IdRef="Assign_17">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:String[]">[SubDirectories]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:String[]">[Directory.GetDirectories(Environment.CurrentDirectory,"*.*",SearchOption.AllDirectories)]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Find Base Directory Path" sap:VirtualizedContainerService.HintSize="568.8,60" sap2010:WorkflowViewState.IdRef="Assign_21">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[FrameworkBaseDirectoryPath]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[SubDirectories.Where(Function(x) Directory.GetFiles(x).Any(Function(y) y.ToLower.Contains("runalltests.xaml"))).FirstOrDefault]</InArgument>
                  </Assign.Value>
                </Assign>
                <If Condition="[String.IsNullOrWhiteSpace(FrameworkBaseDirectoryPath)]" DisplayName="Framework Inegrated Into Another Project?" sap:VirtualizedContainerService.HintSize="568.8,209.6" sap2010:WorkflowViewState.IdRef="If_4">
                  <If.Then>
                    <Assign DisplayName="Framework Standalone - Folder Name" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_22">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[FrameworkBaseFolder]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[BaseFolder]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Framework Integrated - Folder Name" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_23">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[FrameworkBaseFolder]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[FrameworkBaseDirectoryPath.Split(new String() {"\"}, StringSplitOptions.None)(FrameworkBaseDirectoryPath.Split(new String() {"\"}, StringSplitOptions.None).Length-1)]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
                <If sap2010:Annotation.AnnotationText="Check to see if prefix for invokes is needed." Condition="[BaseFolder.Equals(FrameworkBaseFolder)]" DisplayName="Add InvokePrefix?" sap:VirtualizedContainerService.HintSize="568.8,240.8" sap2010:WorkflowViewState.IdRef="If_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Assign DisplayName="Set InvokePrefix to be empty" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_16">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[InvokePrefix]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">
                          <Literal x:TypeArguments="x:String" Value="" />
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Set InvokePrefix as a relative path pointing from a parent project folder" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_26">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[InvokePrefix]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[FrameworkBaseDirectoryPath.Substring(FrameworkBaseDirectoryPath.IndexOf(BaseFolder)+BaseFolder.Length+1)+"\"]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
                <Assign DisplayName="Set TestLog location" sap:VirtualizedContainerService.HintSize="568.8,60" sap2010:WorkflowViewState.IdRef="Assign_30">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[TestLogFile]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[InvokePrefix+"Logs\"+TestLogFile]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
              <Assign DisplayName="LongestFileNameLength" sap:VirtualizedContainerService.HintSize="610.4,60" sap2010:WorkflowViewState.IdRef="Assign_39">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[LongestFileNameLength]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[LongestFileNameLength]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="MaxTestLogsToKeep" sap:VirtualizedContainerService.HintSize="610.4,60" sap2010:WorkflowViewState.IdRef="Assign_40">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[MaxTestLogsToKeep]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">[MaxTestLogsToKeep]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateLogFile workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\CreateLogFile.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke LogsFolderCleanup workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\LogsFolderCleanup.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxTestLogsToKeep">[MaxTestLogsToKeep]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CloseNotepad workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\CloseNotepad.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <scg:Dictionary x:TypeArguments="x:String, Argument" />
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetTestFiles workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\GetTestFiles.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <OutArgument x:TypeArguments="s:String[]" x:Key="out_Files">[TestFiles]</OutArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke ValidateTestCount workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\ValidateTestCount.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_TestFiles">[TestFiles]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetLongestTestFileNameLength workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\GetLongestTestFileNameLength.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_TestFiles">[TestFiles]</InArgument>
                  <OutArgument x:TypeArguments="x:Int32" x:Key="out_LongestNameLength">[LongestFileNameLength]</OutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTextStart workflow" sap:VirtualizedContainerService.HintSize="610.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\AppendTextStart.xaml&quot;]">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_Files">[TestFiles]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="ui:BusinessRuleException" sap:VirtualizedContainerService.HintSize="655.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_4">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="ui:BusinessRuleException">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="exception" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Sequence-Initialization" sap:VirtualizedContainerService.HintSize="375.2,280.8" sap2010:WorkflowViewState.IdRef="Sequence_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1216" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_17" UnSafe="False" WorkflowFileName="[LogFile]">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="logCode">1216</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ExtraLog">["Unable to proceed with the execution. No tests found in the tests repository."+VbCrLf+"Please place test(s) in the '"+InvokePrefix+"Tests_Repository"+"' folder and try again."]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <Assign DisplayName="Set BusinessException" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_29">
                    <Assign.To>
                      <OutArgument x:TypeArguments="ui:BusinessRuleException">[BusinessException]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="ui:BusinessRuleException">[exception]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
            <Catch x:TypeArguments="si:FileNotFoundException" sap:VirtualizedContainerService.HintSize="655.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_6">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="si:FileNotFoundException">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="si:FileNotFoundException" Name="exception" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Sequence-FileNotFound" sap:VirtualizedContainerService.HintSize="752.8,435.2" sap2010:WorkflowViewState.IdRef="Sequence_17">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[exception.Message.Contains(&quot;CommonLogg&quot;)]" DisplayName="If-exception.Message.Contains(&quot;CommonLogg&quot;)" sap:VirtualizedContainerService.HintSize="711.2,242.4" sap2010:WorkflowViewState.IdRef="If_6">
                    <If.Then>
                      <ui:LogMessage DisplayName="Log Message-Fatal" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_18" Level="Fatal" Message="[&quot;Testing Failed. CommonLogg.xaml not found at the specified location.&quot;]" />
                    </If.Then>
                    <If.Else>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1216" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" UnSafe="False" WorkflowFileName="[LogFile]">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="logCode">1216</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="ExtraLog">["Exception : " + exception.Message + Environment.NewLine + "Exception HResult Code : " + exception.HResult.ToString]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </If.Else>
                  </If>
                  <Assign DisplayName="Set SystemError" sap:VirtualizedContainerService.HintSize="711.2,60" sap2010:WorkflowViewState.IdRef="Assign_36">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="655.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_7">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Sequence-SetSystemError" sap:VirtualizedContainerService.HintSize="375.2,280.8" sap2010:WorkflowViewState.IdRef="Sequence_18">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1216" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" UnSafe="False" WorkflowFileName="[LogFile]">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="logCode">1216</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ExtraLog" xml:space="preserve">["System error at initialization: " +  exception.GetType.ToString + " with message: " + exception.Message + " at Source: " + exception.Source+ Environment.NewLine + "Exception HResult Code : " + exception.HResult.ToString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <Assign DisplayName="Set SystemError" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_37">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
        </TryCatch>
      </State.Entry>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">135.6,1.59999999999999</av:Point>
          <av:Size x:Key="ShapeSize">287.2,144</av:Size>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Double x:Key="StateContainerWidth">253.60000000000002</x:Double>
          <x:Double x:Key="StateContainerHeight">47.200000000000045</x:Double>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <State.Transitions>
        <Transition DisplayName="Success" sap:VirtualizedContainerService.HintSize="430.4,515.2" sap2010:WorkflowViewState.IdRef="Transition_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:PointCollection x:Key="ConnectorLocation">422.8,102.4 452.8,102.4 452.8,74.8 534,74.8</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">52</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">37</x:Int32>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <State x:Name="__ReferenceID0" sap2010:Annotation.AnnotationText="Get the unit test file path." DisplayName="Get Next Test" sap:VirtualizedContainerService.HintSize="291.2,149.6" sap2010:WorkflowViewState.IdRef="State_8">
              <State.Entry>
                <Sequence DisplayName="Get Test" sap:VirtualizedContainerService.HintSize="723.2,751.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[TestCounter &lt; TestFiles.Length]" DisplayName="Get Next Test?" sap:VirtualizedContainerService.HintSize="681.6,658.4" sap2010:WorkflowViewState.IdRef="If_1">
                    <If.Then>
                      <Assign DisplayName="Assign-File" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[File]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[TestFiles(TestCounter)]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Sequence DisplayName="Sequence-GetTest" sap:VirtualizedContainerService.HintSize="375.2,508.8" sap2010:WorkflowViewState.IdRef="Sequence_6">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Set File to Nothing" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[File]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Set PassedTestsCounter" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_38">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[PassedTestsCounter]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">[PassedTestsCounter]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTextEnd workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\AppendTextEnd.xaml&quot;]">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:Int32" x:Key="in_PassedTestsCounter">[PassedTestsCounter]</InArgument>
                            <InArgument x:TypeArguments="s:String[]" x:Key="in_Files">[TestFiles]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                            <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_TestsRunTime">[TestsRunTimeStopwatch]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke OpenLogFile workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\OpenLogFile.xaml&quot;]">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                      </Sequence>
                    </If.Else>
                  </If>
                </Sequence>
              </State.Entry>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">534,0</av:Point>
                  <av:Size x:Key="ShapeSize">291.2,149.6</av:Size>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Double x:Key="StateContainerWidth">258</x:Double>
                  <x:Double x:Key="StateContainerHeight">81.60000000000008</x:Double>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <State.Transitions>
                <Transition DisplayName="Success" sap:VirtualizedContainerService.HintSize="430.4,809.6" sap2010:WorkflowViewState.IdRef="Transition_6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:PointCollection x:Key="ConnectorLocation">723.28,149.6 723.28,179.6 759.2,179.6 759.2,220.8</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">51</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">58</x:Int32>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.Condition>[File IsNot Nothing]</Transition.Condition>
                  <Transition.To>
                    <State x:Name="__ReferenceID2" sap2010:Annotation.AnnotationText="Run unit test and append result to log file." DisplayName="Run Test" sap:VirtualizedContainerService.HintSize="917.6,2060" sap2010:WorkflowViewState.IdRef="State_9">
                      <State.Entry>
                        <TryCatch sap:VirtualizedContainerService.HintSize="872.8,1640" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                          <TryCatch.Try>
                            <Sequence DisplayName="Run Test and Append Result" sap:VirtualizedContainerService.HintSize="836,1408.8" sap2010:WorkflowViewState.IdRef="Sequence_4">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Boolean" Name="IsTestValid" />
                                <Variable x:TypeArguments="sd:Stopwatch" Name="Stopwatch" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke ValidateTestFile workflow" sap:VirtualizedContainerService.HintSize="794.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\ValidateTestFile.xaml&quot;]">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="in_testPath">[File]</InArgument>
                                  <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsValidated">[IsTestValid]</OutArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1026" sap:VirtualizedContainerService.HintSize="794.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_22" UnSafe="False" WorkflowFileName="[LogFile]">
                                <ui:InvokeWorkflowFile.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="logCode">1026</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="ExtraLog">["Executing " + File + " workflow."]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                                </ui:InvokeWorkflowFile.Arguments>
                              </ui:InvokeWorkflowFile>
                              <Assign DisplayName="Start stopwatch" sap:VirtualizedContainerService.HintSize="794.4,60" sap2010:WorkflowViewState.IdRef="Assign_33">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="sd:Stopwatch">[Stopwatch]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch.StartNew()]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[IsTestValid]" DisplayName="Is Test Valid?" sap:VirtualizedContainerService.HintSize="794.4,960" sap2010:WorkflowViewState.IdRef="If_5">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence DisplayName="Valid Test" sap:VirtualizedContainerService.HintSize="375.2,810.4" sap2010:WorkflowViewState.IdRef="Sequence_15">
                                    <Sequence.Variables>
                                      <Variable x:TypeArguments="x:Boolean" Name="TestResult" />
                                      <Variable x:TypeArguments="x:String" Name="Message" />
                                    </Sequence.Variables>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <Assign DisplayName="TestResults" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_41">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Boolean">[TestResult]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Boolean">[TestResult]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <Assign DisplayName="Message" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_42">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">[Message]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">[Message]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke RunTest workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\RunTest.xaml&quot;]">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                        <OutArgument x:TypeArguments="x:Boolean" x:Key="out_Result">[TestResult]</OutArgument>
                                        <OutArgument x:TypeArguments="x:String" x:Key="out_Message">[Message]</OutArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1027" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_21" UnSafe="False" WorkflowFileName="[LogFile]">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="logCode">1027</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="ExtraLog">["Executed " + File + " workflow."]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                    <InvokeMethod DisplayName="stopwatch.Stop()" sap:VirtualizedContainerService.HintSize="333.6,133.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Stop">
                                      <InvokeMethod.TargetObject>
                                        <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch]</InArgument>
                                      </InvokeMethod.TargetObject>
                                    </InvokeMethod>
                                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTestResult workflow" sap:VirtualizedContainerService.HintSize="313.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\AppendTestResult.xaml&quot;]">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                        <InArgument x:TypeArguments="x:Boolean" x:Key="in_Result">[TestResult]</InArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="io_PassedTestsCounter">[PassedTestsCounter]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TestCounter">[TestCounter]</InOutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                                        <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsTestValid">[IsTestValid]</InArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="in_FileNameLength">[LongestFileNameLength]</InArgument>
                                        <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_Stopwatch">[Stopwatch]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_Message">[Message]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_LogFile">[LogFile]</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </Sequence>
                                </If.Then>
                                <If.Else>
                                  <Sequence DisplayName="Invalid Test" sap:VirtualizedContainerService.HintSize="375.2,354.4" sap2010:WorkflowViewState.IdRef="Sequence_16">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <InvokeMethod DisplayName="stopwatch.Stop()" sap:VirtualizedContainerService.HintSize="333.6,133.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Stop">
                                      <InvokeMethod.TargetObject>
                                        <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch]</InArgument>
                                      </InvokeMethod.TargetObject>
                                    </InvokeMethod>
                                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTestResult workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Tests_Framework\AppendTestResult.xaml&quot;]">
                                      <ui:InvokeWorkflowFile.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                        <InArgument x:TypeArguments="x:Boolean" x:Key="in_Result" />
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="io_PassedTestsCounter">[PassedTestsCounter]</InOutArgument>
                                        <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TestCounter">[TestCounter]</InOutArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                                        <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsTestValid">[IsTestValid]</InArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="in_FileNameLength">[LongestFileNameLength]</InArgument>
                                        <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_Stopwatch">[Stopwatch]</InArgument>
                                        <InArgument x:TypeArguments="x:String" x:Key="in_Message" />
                                        <InArgument x:TypeArguments="x:String" x:Key="in_LogFile">[LogFile]</InArgument>
                                      </ui:InvokeWorkflowFile.Arguments>
                                    </ui:InvokeWorkflowFile>
                                  </Sequence>
                                </If.Else>
                              </If>
                            </Sequence>
                          </TryCatch.Try>
                          <TryCatch.Catches>
                            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="839.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ActivityAction x:TypeArguments="s:Exception">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                </ActivityAction.Argument>
                                <Sequence DisplayName="Sequence-SystemError" sap:VirtualizedContainerService.HintSize="375.2,280.8" sap2010:WorkflowViewState.IdRef="Sequence_20">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1216" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" UnSafe="False" WorkflowFileName="[LogFile]">
                                    <ui:InvokeWorkflowFile.Arguments>
                                      <InArgument x:TypeArguments="x:String" x:Key="logCode">1216</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="ExtraLog">["Test execution finished due to an error: " + exception.GetType.ToString+" -&gt; Source: "+exception.Source+" -&gt; Details: "+exception.Message + Environment.NewLine + "Exception HResult Code : " + exception.HResult.ToString]</InArgument>
                                      <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                                    </ui:InvokeWorkflowFile.Arguments>
                                  </ui:InvokeWorkflowFile>
                                  <Assign DisplayName="Assign-SystemError" sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </ActivityAction>
                            </Catch>
                          </TryCatch.Catches>
                        </TryCatch>
                      </State.Entry>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">537.2,220.8</av:Point>
                          <av:Size x:Key="ShapeSize">296,157.6</av:Size>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <x:Double x:Key="StateContainerWidth">262.79999999999973</x:Double>
                          <x:Double x:Key="StateContainerHeight">89.599999999999909</x:Double>
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <State.Transitions>
                        <Transition DisplayName="Test Completed" sap:VirtualizedContainerService.HintSize="430.4,513.6" sap2010:WorkflowViewState.IdRef="Transition_8">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <av:PointCollection x:Key="ConnectorLocation">833.2,315.36 863.2,315.36 863.2,74.8 825.2,74.8</av:PointCollection>
                              <x:Int32 x:Key="SrcConnectionPointIndex">44</x:Int32>
                              <x:Int32 x:Key="DestConnectionPointIndex">36</x:Int32>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Transition.To>
                            <x:Reference>__ReferenceID0</x:Reference>
                          </Transition.To>
                          <Transition.Condition>[SystemError Is Nothing]</Transition.Condition>
                        </Transition>
                        <Transition DisplayName="System Error" sap:VirtualizedContainerService.HintSize="430.4,515.2" sap2010:WorkflowViewState.IdRef="Transition_9">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <av:PointCollection x:Key="ConnectorLocation">537.2,315.36 507.2,315.36 507.2,326.2 401.6,326.2</av:PointCollection>
                              <x:Int32 x:Key="SrcConnectionPointIndex">45</x:Int32>
                              <x:Int32 x:Key="DestConnectionPointIndex">48</x:Int32>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Transition.Condition>[SystemError IsNot Nothing]</Transition.Condition>
                          <Transition.To>
                            <State x:Name="__ReferenceID1" sap2010:Annotation.AnnotationText="Execution stops." DisplayName="End" sap:VirtualizedContainerService.HintSize="263.2,164" sap2010:WorkflowViewState.IdRef="State_11" IsFinal="True">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <av:Point x:Key="ShapeLocation">138.4,219.6</av:Point>
                                  <av:Size x:Key="ShapeSize">263.2,164</av:Size>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Double x:Key="StateContainerWidth">229.20000000000005</x:Double>
                                  <x:Double x:Key="StateContainerHeight">96</x:Double>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </State>
                          </Transition.To>
                        </Transition>
                      </State.Transitions>
                    </State>
                  </Transition.To>
                </Transition>
                <Transition DisplayName="No Data" sap:VirtualizedContainerService.HintSize="430.4,515.2" sap2010:WorkflowViewState.IdRef="Transition_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <av:PointCollection x:Key="ConnectorLocation">679.6,149.6 679.6,179.6 431.6,179.6 431.6,252.4 401.6,252.4</av:PointCollection>
                      <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
                      <x:Int32 x:Key="DestConnectionPointIndex">12</x:Int32>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Transition.To>
                    <x:Reference>__ReferenceID1</x:Reference>
                  </Transition.To>
                  <Transition.Action>
                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Log 1036" sap:VirtualizedContainerService.HintSize="313.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_25" UnSafe="False" WorkflowFileName="[LogFile]">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="logCode">1036</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="ExtraLog" />
                        <InArgument x:TypeArguments="x:String" x:Key="JSONPath">[LogFile.Replace("CommonLogg.xaml","")]</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Transition.Action>
                  <Transition.Condition>[File Is Nothing]</Transition.Condition>
                </Transition>
              </State.Transitions>
            </State>
          </Transition.To>
          <Transition.Action>
            <Assign DisplayName="Stopwatch Run" sap:VirtualizedContainerService.HintSize="243.2,60.8" sap2010:WorkflowViewState.IdRef="Assign_34">
              <Assign.To>
                <OutArgument x:TypeArguments="sd:Stopwatch">[TestsRunTimeStopwatch]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch.StartNew()]</InArgument>
              </Assign.Value>
            </Assign>
          </Transition.Action>
          <Transition.Condition>[SystemError Is Nothing and BusinessException is Nothing]</Transition.Condition>
        </Transition>
        <Transition DisplayName="Error" sap:VirtualizedContainerService.HintSize="430.4,515.2" sap2010:WorkflowViewState.IdRef="Transition_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <av:PointCollection x:Key="ConnectorLocation">365.36,145.6 365.36,175.6 256.84,175.6 256.84,219.6</av:PointCollection>
              <x:Int32 x:Key="SrcConnectionPointIndex">63</x:Int32>
              <x:Int32 x:Key="DestConnectionPointIndex">34</x:Int32>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Transition.To>
            <x:Reference>__ReferenceID1</x:Reference>
          </Transition.To>
          <Transition.Condition>[SystemError isNot Nothing or BusinessException isNot Nothing]</Transition.Condition>
        </Transition>
      </State.Transitions>
    </State>
    <x:Reference>__ReferenceID0</x:Reference>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID1</x:Reference>
    <StateMachine.Variables>
      <Variable x:TypeArguments="x:String" Default="[&quot;TestLog_&quot;+Today.ToString(&quot;yyyy-MM-dd&quot;)+&quot;.txt&quot;]" Name="TestLogFile" />
      <Variable x:TypeArguments="s:Exception" Name="SystemError" />
      <Variable x:TypeArguments="s:String[]" Name="TestFiles" />
      <Variable x:TypeArguments="x:String" Name="File" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="TestCounter" />
      <Variable x:TypeArguments="sd:Stopwatch" Name="TestsRunTimeStopwatch" />
      <Variable x:TypeArguments="x:String" Name="InvokePrefix" />
      <Variable x:TypeArguments="ui:BusinessRuleException" Name="BusinessException" />
      <Variable x:TypeArguments="x:Int32" Name="LongestFileNameLength" />
      <Variable x:TypeArguments="x:Int32" Default="10" Name="MaxTestLogsToKeep" />
      <Variable x:TypeArguments="x:String" Name="LogFile" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="PassedTestsCounter" />
    </StateMachine.Variables>
  </StateMachine>
</Activity>